/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
&kp Q           &kp W           &kp E        &kp R             &kp T         &kp Y  &kp U              &kp I            &kp O              &kp P
&kp A           &kp S           &kp D        &kp F             &kp G         &kp H  &kp J              &kp K            &kp L              &kp SEMI
&mt LEFT_ALT Z  &mt LEFT_GUI X  &mt LCTRL C  &mt LEFT_SHIFT V  &kp B         &kp N  &mt RIGHT_SHIFT M  &mt RCTRL COMMA  &mt RIGHT_GUI DOT  &mt RIGHT_ALT SLASH
                                &lt 2 TAB    &kp LGUI          &lt 3 ESCAPE                            &mt RCTRL ENTER  &lt 4 BACKSPACE    &lt 1 DELETE
            >;
        };

        movement {
            display-name = "Movement";
            bindings = <
&kp TAB       &kp LG(X)     &kp LG(C)   &kp LG(V)      &kp RET               &kp MINUS  &kp LG(LC(N1))  &kp LG(LC(N2))  &kp LG(LC(N3))  &kp LG(LC(RET))
&kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp LC(LG(KP_PLUS))   &kp EQUAL  &kp LC(LG(N4))  &kp LG(LC(N5))  &kp LG(LC(N6))  &kp LG(LC(SPACE))
&kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)  &kp LC(LG(KP_MINUS))  &kp TILDE  &kp LG(LC(N7))  &kp LC(LG(N8))  &kp LG(LC(N9))  &kp LG(LC(F))
                            &none       &kp PG_UP      &kp PG_DN                                        &none           &none           &none
            >;
        };

        num {
            display-name = "Num";
            bindings = <
&none           &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))  &none        &none  &kp N1  &kp N2  &kp N3  &none
&none           &none                 &none                 &none           &none        &none  &kp N4  &kp N5  &kp N6  &none
&bt BT_CLR_ALL  &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2    &none        &none  &kp N7  &kp N8  &kp N9  &none
                                      &none                 &none           &bootloader                 &none   &none   &kp N0
            >;
        };

        symbol {
            bindings = <
&kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(PLUS)  &kp MINUS
&kp N1        &kp N2      &kp N3         &kp N4        &kp N5         &kp LS(LPAR)   &kp LS(RPAR)  &kp LBKT      &kp RBKT      &kp LS(COLON)
&kp N6        &kp N7      &kp N8         &kp N9        &kp N0         &kp LS(LBRC)   &kp LS(RBRC)  &kp LS(LT)    &kp LS(GT)    &kp LS(QMARK)
                          &none          &none         &none                                       &kp EQUAL     &kp SQT       &kp LS(DQT)
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &kp LC(LG(LEFT))      &kp LS(PIPE)  &kp SQT   &kp LS(DQT)  &kp LS(TILDE)  &kp GRAVE
&kp F5  &kp F6   &kp F7   &kp F8   &kp LG(LC(UP_ARROW))  &kp BSLH      &kp LEFT  &kp DOWN     &kp UP         &kp RIGHT
&kp F9  &kp F10  &kp F11  &kp F12  &kp LC(LG(RIGHT))     &none         &none     &none        &none          &kp LS(UNDER)
                 &none    &none    &none                                         &none        &none          &none
            >;

            label = "Function";
        };
    };
};
